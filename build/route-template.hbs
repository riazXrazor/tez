/* tslint:disable */
import { initializeDbConnection } from "#config/database";
{{#if canImportByAlias}}
  import { Controller, TsoaRoute } from 'tsoa';
{{else}}
  import { Controller, ValidateParam, FieldErrors, ValidateError, TsoaRoute } from '../../../src';
{{/if}}
{{#if iocModule}}
import { iocContainer } from '{{iocModule}}';
{{/if}}
import { Controller as BaseController } from './controllers/controller.controller';
{{#each controllers}}
import { {{name}} } from '{{modulePath}}';
{{/each}}
{{#if authenticationModule}}
import { expressAuthentication } from '{{authenticationModule}}';
{{/if}}

/*const models: TsoaRoute.Models = {
    {{#each models}}
    "{{@key}}": {
        {{#if enums}}
        "enums": {{{json enums}}},
        {{/if}}
        {{#if properties}}
        "properties": {
            {{#each properties}}
            "{{@key}}": {{{json this}}},
            {{/each}}
        },
        {{/if}}
    },
    {{/each}}
};*/




export default function (fastify: any, _opts: any, done: any) {
  fastify.addSchema({
    $id: 'IData',
    type: ['array','object'],
    items:{},
    properties:{}
  })

  fastify.addSchema({
    $id: 'IError',
    type: 'array',
    items: {
      type: 'object',
      properties: {
        field: { type: 'string' },
        message: { type: 'string' }
      }
    }
  })
 
  fastify.addSchema({
    $id: 'IMeta',
    type: 'object',
    properties: {
      message: { type: 'string' },
      status: { type: 'number' }
    }
  })

  {{#each models}}
  fastify.addSchema({
        $id: '{{@key}}',
        type: ['array','object'],
        {{#if properties}}
        "properties": {
            {{#each properties}}
               "{{@key}}":  {{formateSchema this}} ,
            {{/each}}
        },
        {{/if}}
        "items": {}
  })
{{/each}}
  initializeDbConnection();

    {{#each controllers}}
    {{#each actions}}
        fastify.route({
            method: '{{toUpperCase method}}',
            url: '{{../../basePath}}{{../path}}{{path}}',
            schema: {
              {{#each parameters}}
                {{#each this}}
                  {{#isRef @key}}
                      {{#each ../../../../models}}
                        {{#compare @key ../this}}
                            {{#if properties}}
                                body: {{ toSchema properties }},
                            {{/if}}
                        {{/compare}}
                      {{/each}}
                  {{/isRef}}
                {{/each }}
              {{/each}}
              response: {
                '2xx': { 
                  type: 'object',
                  properties: {
                    data: 'I{{toCamelCase name }}#',
                    errors: 'IError#',
                    meta: 'IMeta#',
                    }
                },
                '4xx': { 
                  type: 'object',
                  properties: {
                    data: 'IData#',
                    errors: 'IError#',
                    meta: 'IMeta#',
                    }
                },
                '5xx': { 
                  type: 'object',
                  properties: {
                    data: 'IData#',
                    errors: 'IError#',
                    meta: 'IMeta#',
                    }
                },
              }
            },
            preHandler: [
              {{#if security.length}}
                authenticateMiddleware({{json security}}),
              {{/if}}
            ],
            attachValidation: true,
            handler: function (request: any, response: any) {  
                        if(request.validationError){
                          handleValidationError(request, response);
                          return;
                        }  
                    
                        const args = getArgs({ {{#each parameters}}{{@key}}: {{{json this}}},{{/each}} }, request)                    
                        {{#if ../../iocModule}}
                        const controller = iocContainer.get<{{../name}}>({{../name}});
                        {{else}}
                        const controller = new {{../name}}(fastify);
                        {{/if}}

                        const promise = controller.{{name}}.apply(controller, args as any);
                        promiseHandler(controller, promise, response);
            }
        })

    {{/each}}
    {{/each}}




    fastify.setErrorHandler((error: any, _request: any, reply: any) => {
    fastify.log.error("Error:",error)
    const controller = new BaseController();
    const arg: any = [[], "Internal Server Error", 500];
    const promise = controller.response.apply(controller, arg);
    reply.code(500).send(promise);
  });

  fastify.setNotFoundHandler((_request: any, reply: any) => {
    const controller = new BaseController();
    const arg: any = [[], "Endpoint not found", 404];
    const promise = controller.response.apply(controller, arg);
    reply.code(404).send(promise);
  })

  function handleValidationError(request: any, response: any){
    fastify.log.error("validationError:",request.validationError)
    const controller = new BaseController();
    const arg: any = [[], "validationError", 400,getErrors(request.validationError.validation)];
    const promise = controller.response.apply(controller, arg);
    response.code(400).send(promise);
  }

  function getErrors(ErrorObj: any){
    return ErrorObj.map((err: any) =>{
      return {
        field: err.params.missingProperty,
        message: err.message
      };
    })
  }

  {{#if useSecurity}}
  function authenticateMiddleware(_securities: TsoaRoute.Security[] = []) {
    return AuthRequest
  }


  function AuthRequest(request: any, reply: any, done: any) {
    request.jwtVerify().then(() => { done(); }).catch((e: any) => {
      const controller = new BaseController();
      const arg: any = [[], e.message, 401];
      const promise = controller.response.apply(controller, arg);
      reply.code(401).send(promise);
      done();
    });

  }
 {{/if}}


  function promiseHandler(controllerObj: any, promise: any, response: any) {
    return Promise.resolve(promise)
      .then((data: any) => {
        let statusCode;
        if (controllerObj instanceof Controller) {
          const controller = controllerObj as Controller
          const headers = controller.getHeaders();
          Object.keys(headers).forEach((name: string) => {
            response.header(name, headers[name]);
          });

          statusCode = controller.getStatus();
        }
    
        if (data || data === false) {
          response.code(statusCode || 200).send(data);
        } else {
          response.code(statusCode || 204).send();
        }
      })
      .catch((err: any) => {
        const controller = new BaseController();
        const arg: any = [[], err.message || err.name, err.status];
        const promise = controller.response.apply(controller, arg);
        response.code(500).send(promise)
      });
  }

  function getArgs(args: any, request: any): any {

    const values = Object.keys(args).map(function(key) {
      const name = args[key].name;
      switch (args[key].in) {
        case 'request':
          return request;
        case 'query':
          return request.query[name]
        case 'path':
          return request.params[name]
        case 'header':
          return request.headers[name]
        case 'body':
          return request.body
        case 'body-prop':
          return request.body[name]
      }
    });

    return values;
  }


    done();
}
